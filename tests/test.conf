# parameters:
#   mock_name: name of your class without "Mock" (e.g., MyClass, the mock class will be MyClassMock)
#   name_space
#   mock_header_template
#   mock_cpp_template
#   stubs_file_template
#   stub_function_template
#   parsing_args: the set of options passed to GCC while compiling the production code
#   header_output_path: where to save the output header file
#   source_output_path: where to save the output source files
# internally used only:
#   guard: used in mock header, inferred from moc_name (e.g, __MYCLASS_MOCK_)
#   mock_header: file name of mock header, inferred from mock_name (e.g, myclass_mock.hpp)
#   mock_methods
#   mock_instance
#   headers
parsing_args = "-x c++ --std=c++11 -include stddef.h -include stdint.h"
name_space = "mynamespace"
mock_name = "MyClass"
output_root_dir = '.'
header_output_path = "my/output/path/"
source_output_path = "my/output/path/src"
mock_header_template = """
//
// Confidential
//

#ifndef %(guard)s
#define %(guard)s

#include <gmock/gmock.h>

%(header_files)s

namespace %(name_space)s {
namespace unittest {

class %(mock_name)s {
public:
    %(mock_methods)s

    static testing::NiceMock<%(mock_name)s>* getInstance();
    static void removeInstance();

private:
    static testing::NiceMock<%(mock_name)s> *%(mock_instance)s;
};

} /* unittest */
} /* %(name_space)s */

#endif /* %(guard)s */
"""

mock_cpp_template = """
//
// Confidential
//

#include "%(header_output_path)s/%(mock_header)s"

namespace %(name_space)s {
namespace unittest {

testing::NiceMock<%(mock_name)s> *%(mock_name)s::%(mock_instance)s = nullptr;

testing::NiceMock<%(mock_name)s>* %(mock_name)s::getInstance() {
    if( %(mock_name)s::%(mock_instance)s == nullptr ) {
        %(mock_name)s::%(mock_instance)s = new testing::NiceMock<%(mock_name)s>();
    }

    return %(mock_name)s::%(mock_instance)s;
}

void %(mock_name)s::removeInstance() {
    if( %(mock_name)s::%(mock_instance)s ) {
        delete %(mock_name)s::%(mock_instance)s;
    }

    %(mock_name)s::%(mock_instance)s = nullptr;
}

} /* unittest */
} /* %(name_space)s */

"""

stubs_file_template = """
//
// Confidential
//

#include "%(header_output_path)s/%(mock_header)s"

using %(name_space)s::unittest::%(mock_name)s;

%(stubs)s

"""

stub_function_template = """
%(result_type)s %(function_name)s( %(parameters_with_types)s ) {
    %(return)s %(mock_name)s::getInstance()->%(function_name)s( %(parameters)s );
}
"""

